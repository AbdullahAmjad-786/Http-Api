trigger:
- main
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'test-subscription'
  resourceGroup: 'test-rg'
  location: 'eastus'
  appServiceName: 'test-app-service'
  storageAccount: 'testsa'
  storageAccountContainer: 'testblob'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'
  displayName: 'Install Python 3.8'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  workingDirectory: '$(System.DefaultWorkingDirectory)/Api'
  displayName: 'Install Python dependencies'

- script: |
    python -m pytest tests/
  workingDirectory: '$(System.DefaultWorkingDirectory)/Api'
  displayName: 'Run tests'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Api'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/package.zip'
    replaceExistingArchive: true


- task: AzureCLI@2
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --name $(resourceGroup) --location $(location)
      az storage account create -n $(storageAccount) -g $(resourceGroup) -l $(location) --sku Standard_LRS
      az storage container create -n $(storageAccountContainer)

- task: TerraformInstaller@0
  inputs:
    terraformVersion: '1.0.11'

- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
    backendType: 'azurerm'
    backendServiceArm: '$(azureSubscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(storageAccountContainer)'
    backendAzureRmKey: 'terraform.state'

- task: TerraformCLI@0
  inputs:
    command: 'validate'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'

- task: TerraformCLI@0
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
    environmentServiceNameAzureRM: '$(azureSubscription)'
    environmentServiceNameAzureCloud: 'AzureCloud'

- task: TerraformCLI@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
    environmentServiceNameAzureRM: '$(azureSubscription)'
    environmentServiceNameAzureCloud: 'AzureCloud'

- task: AzureWebApp@1
  inputs:
    azureSubscription: '$(azureSubscription)'
    appName: '$(appServiceName)'
    package: '$(System.DefaultWorkingDirectory)/package.zip'
